// from Rust Programming language

// 一番シンプルなスマートポインター
// Box<T>を使うことでスタックではなくて、ヒープに保存する

// 使用タイミング
// ・コンパイル時にはサイズを知ることができない型があり、正確なサイズを要求する文脈でその型の値を使用する時
// ・多くのデータがあり、その所有権を移したいが、その際にデータがコピーされないようにしたい時
// ・値を所有する必要があり、特定の型であることではなく、特定のトレイトを実装する型であることのみ気にかけている時

pub fn box_how_to_use() {
    let b = Box::new(5);
    println!("b = {}", b);
    // メモリの解放は（スタックに格納されている）ボックスと（ヒープに格納されている）指しているデータに対して起きます。
}
